(function (o) {
    "use strict";

    var dummy = document.createElement("div"),
        strap = {
            addClass: function (val) {
                return this.each(function (targ) {
                    if (that.hasClass(targ, val) === false) {
                        var cName = targ.className + ((targ.className.length) ? " " : "");
                        cName += val;
                        targ.className = cName;
                    }
                });
            },
            append: function (el) {
                return this.each(function (targ) {
                    if (o.isNode(el)) {
                        targ.appendChild(el);
                    } else if (o.isString(el)) {
                        targ.appendChild(that.build(el));
                    }
                });
            },
            css: function (prop, val) {
                if (typeof prop === "object") {
                    var key, propVal;
                    for (key in prop) {
                        if (prop.hasOwnProperty(key)) {
                            propVal = (o.isString(propVal)) ? prop[key] : prop[key].toString();
                            key = convertToStyle(key);
                            // FIXME: Don't make functions within a loop.
                            this.each(function (targ) {
                                targ.style[key] = propVal;
                            });
                        }
                    }
                } else {
                    prop = convertToStyle(prop);
                    if (!exists(val)) {
                        return window.getComputedStyle(this, null)[prop];
                    }
                    this.each(function (targ) {
                        targ.style[prop] = val;
                    });
                }
                return this;
            },
            // find
            // ----
            // Uses querySelectorAll to find dom elements within a strapped collection
            // Returns the results as a new strapped collection
            find: function (val) {
                var results, strap = o.strap();
                this.each(function (targ) {
                    results = targ.querySelectorAll(val);
                    o.each(results, function (result) {
                        strap.push(result);
                    });
                });
                return strap;
            },
            // Checks if any objects in the collection has a class
            hasClass: function (val) {
                var has = false;
                this.each(function (targ) {
                    if (that.hasClass(targ, val)) {
                        has = true;
                    }
                });
                return has;
            },
            hide: function () {
                return this.css("display", "none");
            },
            prepend: function (el) {
                return this.each(function (targ) {
                    var node = el;
                    if (o.isString(node)) {
                        node = o.build(el);
                    }
                    if (targ.children.length) {
                        targ.insertBefore(node, targ.firstChild);
                    } else {
                        targ.appendChild(node);
                    }
                });
            },
            remove: function () {
                return this.each(function (targ) {
                    var pNode = targ.parentNode;
                    if (pNode) {
                        pNode.removeChild(targ);
                    }
                });
            },
            removeClass: function (val) {
                var cName,
                    re = new RegExp('\\b' + val + '\\b\\s?', 'g');
                return this.each(function (targ) {
                    cName = targ.className.replace(re, "");
                    targ.className = cName;
                });
            },
            show: function() {
                return this.each(function (targ) {
                    targ.style.display = "block";
                });
            }
        },
        that = {
            // Build an html node from a string
            build: function (str) {
                dummy.innerHTML = str;
                var node = dummy.firstChild;
                dummy.innerHTML = "";
                return node;
            },
            contains: function (targ, child) {
                if (child) {
                    var b;
                    while (b = b.parentNode) {
                        if (b === targ[0]) {
                            return true;
                        }
                    }
                }
                return false;
            },
            find: function(val) {
                return document.querySelector(val);
            },
            findAll: function(val) {
                return document.querySelectorAll(val);
            },
            hasClass: function(targ, val) {
                var has = false,
                    re = new RegExp('\\b' + val + '\\b\\s?', 'g');
                if (re.test(targ.className)) {
                    has = true;
                }
                return has;
            }
        };

    /**
    * Converts a dashed string into a DOM style property.
    * ie: -webkit-transition => webkitTransition
    * @param {string} str The string to be converted.
    * @return {string} The converted string.
    */
    function convertToStyle(str) {
        var i, 
            matches = str.match(/\b-\w/g), 
            len = exists(matches) ? matches.length : 0;
        if (!len) {
            return str;
        }
        for (i = 0; i < len; i += 1) {
            str = str.replace(matches[i], matches[i][1].toUpperCase());
        }
        return str;
    }

    /**
    * Helper to see if the argument is defined and is not a falsy value.
    * @param {Object} o The argument in question of truthiness.
    * @return {boolean}
    */
    function exists(o) {
        return typeof o !== "undefined" && o !== null;
    }
    

    // wrap module methods with a scope
    function moduleStrap(obj) {
        if (typeof obj === "undefined" || !obj) { return; }
        var strap = {};
        for (var key in module) {
            strap[key] = module[key].bind(obj);
        }
        return strap;
    }

    o.core.expose(strap);
    o.core.extend(that);
}(oak));

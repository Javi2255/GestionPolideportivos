(function (o) {
    "use strict";

    var animEvents = {'animation': 'animationend', '-moz-animation': 'animationend', '-webkit-animation': 'webkitAnimationEnd'},
        prefixes = ['Moz', 'Webkit', 'O', 'ms'],
        numPrefixes = prefixes.length,
        style = (document.body || document.documentElement).style,
        transEvents = {'transition': 'transitionend', '-moz-transition': 'transitionend', '-o-transition': 'oTransitionEnd', '-webkit-transition': 'webkitTransitionEnd', '-ms-transition': 'MSTransitionEnd'},
        support = {
            animation: getProp('animation'),
            animationDelay: getProp('animationDelay'),
            animationDirection: getProp('animationDirection'),
            animationDuration: getProp('animationDuration'),
            animationFillMode: getProp('animationFillMode'),
            animationIterationCount: getProp('animationIterationCount'),
            animationName: getProp('animationName'),
            animationPlayState: getProp('animationPlayState'),
            animationTimingFunction: getProp('animationTimingFunction'),
            ie: isIE(),
            isIEVersion: isIEVersion,
            isTouch: isTouch(), 
            getProp: getProp,
            perspective: getProp('perspective'),
            perspectiveOrigin: getProp('perspective-origin'),
            // oak.support.pixelRatio
            // ----------------------
            // equivelant of window.devicePixelRatio with value set to 1
            // for non-supporting browsers.
            pixelRatio: window.devicePixelRatio || 1,
            prefixes: prefixes,
            transition: getProp('transition'),
            transitionDelay: getProp('transitionDelay'),
            transitionDuration: getProp('transitionDuration'),
            transitionProperty: getProp('transitionProperty'),
            transitionTimingFunction: getProp('transitionTimingFunction'),
            transform: getProp('transform')
        },
        that = {};

    that._dummyCanvas = document.createElement("canvas");
    that._dummyCtx = that._dummyCanvas.getContext("2d");

    support.animationEnd = animEvents[that.animation];
    support.canvas = o.defined(that._dummyCtx);
    support.cssanimations = (typeof that.animation === "undefined") ? false : true;
    support.csstransitions = (typeof that.transition === "undefined") ? false : true;
    support.transitionEnd = transEvents[that.transition];
    support.deviceBackingRatio = dbRatio();
    that.support = support;

    // FIXME: 'getProp' was used before it was defined.
    function getProp(prop) {
        var i, cased, styleProp;
        if (prop in style) {
            return normalize(prop);
        }
        cased = prop.charAt(0).toUpperCase() + prop.substr(1); 
        for (i = 0; i < numPrefixes; i += 1) {
           styleProp = prefixes[i] + cased; 
           if (styleProp in style) {
               return normalize(styleProp);
           }
        }
    }

    // FIXME: 'isIE' was used before it was defined.
    function isIE() {
        return (navigator.appVersion.indexOf("MSIE") !== -1) ? true : false;
    }

    // FIXME: 'isIEVersion' was used before it was defined.
    function isIEVersion(ver) {
        var version;
        if (that.isIE === true) {
            version = parseFloat(navigator.appVersion.split("MSIE")[1]);
        }
        return version === ver;
    }

    // FIXME: 'isTouch' was used before it was defined.
    function isTouch() {
        // FIXME: 'DocumentTouch' is not defined.
        if(("ontouchstart" in window) || window.DocumentTouch && document instanceof DocumentTouch || window.navigator.msMaxTouchPoints) {
            return true;
        }
        return false;
    }

    // Normalizes the style properties for css declartions (E.g. WebkiteTransition -> -webkit-transition)
    function normalize(str) {
        return str.replace(/([A-Z])/g, function(i) { return '-' + i.toLowerCase(); });
    }

    // oak.support.deviceBackingRatio
    // ----------------------
    // backingStorePixel to devicePixel ratio
    function dbRatio() {
        if (support.canvas === false) {
            return 1;
        }

        var ctx = that._dummyCtx,
            devicePixelRatio = window.devicePixelRatio || 1,
            backingStoreRatio = ctx.webkitBackingStorePixelRatio ||
                                ctx.mozBackingStorePixelRatio ||
                                ctx.msBackingStorePixelRatio ||
                                ctx.oBackingStorePixelRatio ||
                                ctx.backingStorePixelRatio || 1;
        return devicePixelRatio/backingStoreRatio;
    }

    o.core.extend(that);
}(oak));

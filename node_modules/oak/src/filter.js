(function (o) {
    "use strict";

    var filters, that = {};

    filters = {
        brightness: function(pixels, val) {
            var d = pixels.data;
            for (var i = 0; i < d.length; i += 4) {
                d[i] += val;
                d[i+1] += val;
                d[i+2] += val;
            }
            return pixels;
        },
        contrast: function(pixels, val) {
            val = Math.pow((val + 100) / 100, 2);
            var r, g, b, d = pixels.data;
            for (var i = 0; i < d.length; i += 4) {
                r = d[i]/255;
                g = d[i + 1]/255;
                b = d[i + 2]/255;
                r = (((r - 0.5) * val) + 0.5) * 255;
                g = (((g - 0.5) * val) + 0.5) * 255;
                b = (((b - 0.5) * val) + 0.5) * 255;
                d[i] = r;
                d[i + 1] = g;
                d[i + 2] = b;
            }
            return pixels;
        },
        grayscale: function(pixels, args) {
            var d = pixels.data;
            for (var i = 0; i < d.length; i += 4) {
                var r = d[i];
                var g = d[i + 1];
                var b = d[i + 2];
                var v = 0.2126 * r + 0.7152 * g + 0.0722 * b;
                d[i] = d[i + 1] = d[i + 2] = v;
            }
            return pixels;
        },
        saturation: function (pixels, val) {
            val = val * -0.01;
            var max, d = pixels.data;
            for (var i = 0; i < d.length; i += 4) {
                max = Math.max(d[i], d[i + 1], d[i + 2]);
                d[i] = (d[i] !== max) ? d[i] + ((max - d[i]) * val) : d[i];
                d[i + 1] = (d[i + 1] !== max) ? d[i + 1] + ((max - d[i + 1]) * val) : d[i + 1];
                d[i + 2] = (d[i + 2] !== max) ? d[i + 2] + ((max - d[i + 2]) * val) : d[i + 2];
            }
            return pixels;
        },
        sepia: function (pixels, val) {
            var rgba = {},
                adjust;
            rgba.r = Math.min(255, (rgba.r * (1 - (0.607 * adjust))) + (rgba.g * (0.769 * adjust)) + (rgba.b * (0.189 * adjust)));
            rgba.g = Math.min(255, (rgba.r * (0.349 * adjust)) + (rgba.g * (1 - (0.314 * adjust))) + (rgba.b * (0.168 * adjust)));
            rgba.b = Math.min(255, (rgba.r * (0.272 * adjust)) + (rgba.g * (0.534 * adjust)) + (rgba.b * (1- (0.869 * adjust))));
        }
    };

    function getCanvas(w, h, cId) {
        var c = document.getElementById(cId);
        if (typeof c === "undefined") {
            c = document.createElement("canvas");
        } 
        c.width = w;
        c.height = h;
        return c;
    }

    function getPixels(img, c, ctx) {
        ctx.drawImage(img, 0, 0);
        return ctx.getImageData(0, 0, c.width, c.height);
    }

    that.filter = function(src, canvasId, vals) {
        var args, pixels, img = new Image();
        img.onload = function () {
            var c = getCanvas(img.width, img.height, canvasId),
            ctx = c.getContext("2d");

            pixels = getPixels(img, c, ctx);
            for (var fKey in vals) {
                if (filters.hasOwnProperty(fKey)) {
                    pixels = filters[fKey].apply(ctx, [pixels, vals[fKey]]);
                }
            }
            ctx.putImageData(pixels, 0, 0, 0, 0, pixels.width, pixels.height);
        };
        img.src = src;
    };

    o.core.extend(that);
}(oak));


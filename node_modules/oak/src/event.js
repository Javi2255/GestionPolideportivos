(function (o) {
    "use strict";

    var dict = {}, 
        strap = {
            // On
            // --
            // Bind an event to the strapped collection 
            on: function (name, callback) {
                if (!o.defined(name, callback)) {
                    return this;
                }

                // FIXME: Expected an assignment or function call and instead saw an expression.
                this.events || (this.events = {});
                var list = this.events[name] || (this.events[name] = []); 
                list.push(callback);
                return this;
            },

            // Off
            // ---
            // Unbind an event
            off: function (name, callback) {
                if (!o.defined(name, this.events, this.events[name])) {
                    return this;
                }
                if (o.defined(callback)) {
                    var self = this;
                    o.each(this.events[name], function (func, index) {
                        if (func === callback) {
                            self.events[name].splice(index, 1);
                        }
                    });
                }

                if (!o.defined(callback) || this.events[name].length === 0) {
                    delete this.events[name];
                }
                return this;
            },

            // Once
            // ----
            // Binds an event that is only trigger once
            // Once triggered, it is removed
            once: function (name, callback) {
                if (!o.defined(name, callback)) {
                    return this;
                }
                var once = function () {
                    callback.apply(this, arguments);
                    this.off(name, once);
                };
                return this.on(name, once);
            },

            // Trigger
            // -------
            // Dispatch an event
            trigger: function (name) {
                if (!o.defined(name, this.events) || !o.defined(this.events[name])) {
                    return this;
                }
                var self = this,
                    args = o.ArrProto.slice.call(arguments, 1);
                o.each(this.events[name], function (callback) {
                    callback.apply(self, args);
                });
                return this;
            }
        },
        that = {};
    
    o.core.expose(strap);
}(oak));

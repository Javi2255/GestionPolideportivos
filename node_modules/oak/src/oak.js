// Authors 
// ---
// Maxwell Folley  
// Ryan Kee  
// David Glivar  
//
// Copyright
// ---------
// 2013 Flavor LLC

// Create oak global namespace
var oak = window.oak =  (function () {
    "use strict";

    var VERSION = "0.0.1", 
        methods = {},
        modules = {},
        // o is used to set oak properties 
        o = {
            // Oak vars intended to be used privately, prepend with an underscore
            _splitter: /\s+/,
            // Save out prototypes for easy acces and smaller file size
            ArrProto: Array.prototype,
            FuncProto: Function.prototype,
            ObjProto: Object.prototype,
            StrProto: String.prototype,
            // Easily iterate through an array or object 
            each: function (stack, iterator, context)  {
                // Use Array.forEach
                if (o.ArrProto.forEach && stack.forEach === o.ArrProto.forEach) {
                    return stack.forEach(iterator, context);
                // Fallback when native Array.forEach is not available (< ie 8)
                } else if (stack.length) {
                    var i, len = stack.length;
                    for (i = 0; i < len; i += 1) {
                        if (iterator.call(context, stack[i], i, stack) === {}) {
                            return;
                        }
                    }
                // Loop an Object
                } else {
                    var key;
                    for (key in stack) {
                        if (o.ObjProto.hasOwnProperty.call(stack, key)) {
                            if (iterator.call(context, stack[key], key, stack) === {}) {
                                return;
                            }
                        }
                    }
                }
            },
            // Defined 
            // ------
            // Helper to check defined arguments
            // If all defined it returns true
            // If any aren't defined, it returns false.
            // E.g. if (oak.exists(myVar, yourVar)) {};
            defined: function () {
                var i, args = o.ArrProto.slice.call(arguments, 0), numArgs = args.length;
                for (i = 0; i < numArgs; i += 1) {
                    if (typeof args[i] === "undefined") {
                        return false;
                    }
                }
                return true;
            },
            // Exists
            // ------
            // Helper to check if variables exist
            // If undefined, null, false, or 0 it will return false
            exists: function () {
                var i, args = o.ArrProto.slice.call(arguments, 0), numArgs = args.length;
                for (i = 0; i < numArgs; i += 1) {
                    if (typeof args[i] === "undefined" || !args[i]) {
                        return false;
                    }
                }
                return true;
            },

            // Copy contents of source objects into the target object
            // oak.extend(target, *sources);
            extend: function (targ) {
                var args = Array.prototype.slice.call(arguments, 1);
                o.each(args, function(src) {
                    if (src) {
                        for (var prop in src) {
                            targ[prop] = src[prop];
                        }
                    }
                });
                return targ;
            },
            isArray: Array.isArray || function (val) {
                return o.ObjProto.toString.call(val) === "[object Array]";
            },
            isElement: function (val) {
                return val instanceof HTMLElement;
            },
            // Checks if an object has any properties
            isEmpty: function( val) {
                if (val == null) {
                    return true;
                } else if (o.isArray(val) || o.isString(val)) {
                    return val.length === 0;
                }
                for(var prop in val) {
                    if (o.ObjProto.hasOwnProperty.call(val, prop)) {
                        return false;
                    }
                }
                return true;
            },
            isNode: function (val) {
                return val.nodeType === 1;
            },
            // A private key used to store information for this session
            privateKey: "oak" + (VERSION + Math.random()).replace(/\D/g, "")
        };

    function buildStrapped() {
        var strapped,
            args = o.ArrProto.slice.call(arguments, 0);

        if (o.isString(args[0])) {
            strapped = document.querySelectorAll(args[0]);
        } else if (o.defined(args[0]) && o.defined(args[0].find, args[1]) && o.isString(args[1])) {
            strapped = args[0].find(args[1]);
            return strapped;
        } else if (args.length) {
            strapped = args;
        } else {
            strapped = [];
        }
        // Equivelant of strapped.__proto_ = methods_
        strapped = setPrototypeOf(methods, strapped);
        return strapped;
    }

    // Exposes methods so they're attached to strapped objects 
    function expose(val) {
        // TODO
        // If module is defined, nest it in a module definition
        // Otherwise expose it to the root of the object
        // methods.dom = {};
        for (var key in val) {
            if (val.hasOwnProperty(key) && !methods.hasOwnProperty[key]) {
                methods[key] = val[key];
            }
        }
    }

    // Equivelant of setting __proto__
    function setPrototypeOf(obj, proto) {
        var type = typeof proto;
        if (typeof obj == "object" && (type == "object" || type =="function")) {
            var constructor = function (obj) {
                var key;
                for (key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        this[key] = obj[key];
                    }
                }
            };
            constructor.prototype = proto;
            return new constructor(obj);
        } else {
            throw new TypeError("Expected both argumnets to be objects"); 
        }
    }

    // oak.each
    // --------
    // Convenience method for looping an oak collection 
    methods.each = function (iterator, context) {
        o.each(this, iterator, context);
        return this;
    };

    // oak.expose
    // ----------
    // Exposes strapped methods from a module
    // to the collection.
    methods.expose = function () {
        var args = o.ArrProto.slice.call(arguments, 0);
        o.each(args, function (id) {
            if (o.isString(id) && modules[id]) {
            }
        });
        return this;
    };

    // oak.extend
    // ----------
    // Allows any object to be extended with the properties of the
    // first param.
    methods.extend = function () {
        var args = [this].concat(o.ArrProto.slice.call(arguments, 0));
        o.extend.apply(o, args);
        return this;
    };

    // oak.strap
    // ---------
    // Returns a bootstrapped obejct.
    // The object will have any function assigned to the methods object,
    // and those methods will use the obj param as the scope.
    // Can take 2 params. First param can either be a string to query
    // the dom for or a strapped object. If it's a strapped object it will
    // query the collection in that object using the second param, which oak
    // expects to be a string. If no params, it returns a strapped object with
    // an empty collection.
    //
    // Alternatively, the strap method can take an unlimited number of params
    // as long as each one is a dom element it will be pushed into the 
    // strapped collection.
    o.strap = function () {
        return buildStrapped.apply(o, arguments);
    };

    // Core object allows us to extend the oak namespace 

    // Use expose to expose methods to strappable collections
    // Use extend to add methods to the oak core
    o.core = {
        // When extending core, it attaches it to the oak namespace
        extend = function () {
            var args = [o].concat(o.ArrProto.slice.call(arguments, 0));
            o.extend.apply(o, args); 
        },
        expose: expose
    };

    o.each(["Arguments", "Date", "Function", "Number", "RegExp", "String"], function (name) {
        o["is" + name] = function (val) {
            return o.ObjProto.toString.call(val) === "[object " + name + "]";
        };
    });
    
    // AMD definition for use with AMD laoders
    if (typeof define === "function" && define.amd) {
        define(o);
    }

    return o;
}());

(function (o) {
    "use strict";

    var cache = {}, 
        cacheId = 0,
        strap = {
            // Data
            // ----
            // Creates a key value store object on the collection.
            data: function (key, val) {
                if (key.match(o._splitter)) {
                    throw new Error("Data key must not contain whitespace");
                }

                // Set data on all elements
                if (o.defined(val)) {
                    return this.each(function (targ) {
                        setData(targ, key, val);
                    }); 
                // Get data from first element
                } else if (this.length) {
                    return getData(this[0], key);
                }
            },
            // Remove Data
            // -----------
            // Removes a keyed sotrage object from the collections cache.
            removeData: function (key) {
                return this.each(function (targ) {
                    var isNode = o.isNode(targ),
                        id = getId(targ, isNode),
                        cache = getCache(targ, isNode),
                        dataStore = cache[id];

                    if (o.defined(dataStore)) {
                        delete dataStore[key];
                        // If not an html node and it's attached cache is empty, remove it.
                        if (!isNode && o.isEmpty(dataStore)) {
                            delete targ[o.privateKey];  
                        }
                    }
                });
            }
        };
    
    function getData(targ, key) {
        return getStore(targ)[key];
    }

    function getCache(targ, isNode) {
        return isNode ? cache : targ;
    }

    function getId(targ, isNode) {
        return isNode ? targ[o.privateKey] : targ[o.privateKey] && o.privateKey; 
    }

    function getStore(targ) {
        var dataStore, isNode = o.isNode(targ),
            // If it is a node, we store the data in the global cache 
            // if not, we store it directly on the object
            thisCache = getCache(targ, isNode),
            id = getId(targ, isNode);//isNode ? targ[o.privateKey] : targ[o.privateKey] && o.privateKey; 

        if (!id) {
            // If a node, the node only stores it's global cache id
            if (isNode) {
                targ[o.privateKey] = id = cacheId += 1;
            } else {
                id = o.privateKey;
            }
        }

        dataStore = thisCache[id] = thisCache[id] || {};
        return dataStore;
    }

    function setData(targ, key, val) {
        var store = getStore(targ);
        store[key] = val; 
    }

    o.core.expose(strap);
}(oak));

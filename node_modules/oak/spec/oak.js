"use strict";

describe("oak", function () {

    it("should exist", function () {
        expect(oak).toBeDefined();
    });
    
    describe(".each()", function () {
        it("should exist within the oak namespace", function () {
            expect(oak.each).toBeDefined();
        });
    });

    describe(".defined()", function () {
        it("should exist within the oak namespace", function () {
            expect(oak.defined).toBeDefined();
        });

        it("returns true for a defined argument", function () {
            var def = true;
            expect(oak.defined(def)).toBe(true);
        });

        it("returns false for an undefined argument", function () {
            var def;
            expect(oak.defined(def)).toBe(false);
        });

        it("accepts multiple arguments", function () {
            var def1 = true,
                def2 = false,
                fn = function () {
                    oak.defined(def1, def2);
                };
            expect(fn).not.toThrow();
        });

        it("returns false if any one of its arguments is undefined", function () {
            var def1 = true,
                def2,
                def3 = true;
            expect(oak.defined(def1, def2, def3)).toBe(false);
        });

        it("returns true if all of its arguments are defined", function () {
            var def1 = true,
                def2 = false,
                def3 = true;
            expect(oak.defined(def1, def2, def3)).toBe(true);
        });
    });

    describe(".exists()", function () {
        it("exists within the oak namespace", function () {
            expect(oak.exists).toBeDefined();
        });

        it("returns true for a defined argument", function () {
            var def1 = true;
            expect(oak.exists(def1)).toBe(true);
        });

        it("returns true for a truthy argument", function () {
            var def1 = 1;
            expect(oak.exists(def1)).toBe(true);
        });

        it("returns false for an undefined argument", function () {
            var def1;
            expect(oak.exists(def1)).toBe(false);
        });

        it("returns false for a falsy argument", function () {
            var def1 = false,
                def2 = 0,
                def3 = null;
            expect(oak.exists(def1)).toBe(false);
            expect(oak.exists(def2)).toBe(false);
            expect(oak.exists(def3)).toBe(false);
        });

        it("allows for multiple arguments", function () {
            var def1 = true,
                def2 = 1,
                fn = function () {
                    oak.exists(def1, def2);
                };
            expect(fn).not.toThrow();
        });

        it("returns true if all of its arguments are defined or are truthy", function () {
            var def1 = true,
                def2 = 1,
                def3 = {};
            expect(oak.exists(def1, def2, def3)).toBe(true);
        });

        it("returns false if any one of its arguments is undefined or falsy", function () {
            var def1 = true,
                def2 = false,
                def3;
            expect(oak.exists(def1, def2, def3)).toBe(false);
        });
    });

    describe(".isArray()", function () {
        it("exists within the oak namespace", function () {
            expect(oak.isArray).toBeDefined();
        });

        it("returns true if the argument is an array", function () {
            var arr = [0, 1, 2, 3];
            expect(oak.isArray(arr)).toBe(true);
        });

        it("returns false if the argument is not an array", function () {
            var a = {a: "b"},
                b = 1,
                c = "string",
                d = null,
                e;
            expect(oak.isArray(a)).toBe(false);
            expect(oak.isArray(b)).toBe(false);
            expect(oak.isArray(c)).toBe(false);
            expect(oak.isArray(d)).toBe(false);
            expect(oak.isArray(e)).toBe(false);
        });
    });

});

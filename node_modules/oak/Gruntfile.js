/*global module:false*/
module.exports = function(grunt) {
    "use strict";

    // Project configuration.
    grunt.initConfig({
        pkg: '<json:package.json>',
        meta: {
          banner: '/*! <%= pkg.title || pkg.name %> - v<%= pkg.version %> - ' +
            '<%= grunt.template.today("yyyy-mm-dd") %>\n' +
            '<%= pkg.homepage ? "* " + pkg.homepage + "\n" : "" %>' +
            '* Copyright (c) <%= grunt.template.today("yyyy") %> <%= pkg.author.name %>;' +
            ' Licensed <%= _.pluck(pkg.licenses, "type").join(", ") %> */'
        },
        concat: {
          dist: {
            src: ['<banner:meta.banner>', '<file_strip_banner:src/<%= pkg.name %>.js>'],
            dest: 'dist/<%= pkg.name %>.js'
          }
        },
        min: {
          dist: {
            src: ['<banner:meta.banner>', '<config:concat.dist.dest>'],
            dest: 'dist/<%= pkg.name %>.min.js'
          }
        },
        jshint: {
          all: [
            'Gruntfile.js',
            'src/**/*.js',
            'spec/**/*.js'
          ],
          options: {
            jshintrc: ".jshintrc"
          },
        },
        jasmine: {
          src: ["dist/oak.js"],
          options: {
            specs: ["spec/**/*.js"]
          }
        },
        watch: {
          test: {
            files: ['Gruntfile.js', '<%= jasmine.src %>', '<%= jasmine.options.specs %>'],
            tasks: 'buildtest'
          }
        },
        uglify: {
            dist: {
                src: ["dist/oak.js"],
                dest: "dist/oak.min.js"
            }
        },
        oak: {
            dest: "dist/oak.js",
            min: "dist/oak.min.js",
            src: [
              "src/oak.js",
              {flag: "dom", src: "src/dom.js"},
              {flag: "data", src: "src/data.js"},
              {flag: "event", src: "src/event.js"},
              {flag: "util", src: "src/util.js"},
              {flag: "support", src: "src/support.js"},
              {flag: "animate", src: "src/animate.js", needs: ["support"]},
              {flag: "swipe", src: "src/swipe.js", needs: ["event", "data"]}
            ]
        }
    });

    grunt.loadNpmTasks("grunt-contrib-uglify");
    grunt.loadNpmTasks("grunt-contrib-jasmine");
    grunt.loadNpmTasks("grunt-contrib-watch");
    grunt.loadNpmTasks("grunt-contrib-jshint");

    //grunt.registerTask("test", ["jshint", "buildtest"]);
    grunt.registerTask("buildtest", ["build", "jasmine"]);

    // Default task.
    grunt.registerTask("default", ["jshint", "jasmine", "build"]);

    grunt.registerTask("custom", function () {
        var args = Array.prototype.slice.call(arguments, 0),
            build = grunt.config.get("oak"),
            compiled = "",
            resolved = [],
            filepath;

        
        args = args[0].split(",");
        function compileModule (flag) {
            var module = getModule(flag), str = "";
            if(!resolved[flag] && module) {
                if (module.needs) {
                    module.needs.forEach(function (needFlag) {
                        str += compileModule(needFlag); 
                    });
                }
                resolved[flag] = true;
                str += grunt.file.read(module.src);
                grunt.log.writeln(("compiled " + module.src).green);
            }
            return str;
        }

        function getModule(flag) {
            var mod;
            build.src.some(function (module) {
                if (module.flag === flag) {
                    mod = module;
                    return true;
                }
                return false;
            });
            return mod;
        }

        build.src.forEach(function (module) {
            if (typeof module === "string") {
                filepath = module;
                compiled += grunt.file.read(filepath);
                grunt.log.writeln(("compiled " + filepath).green);
            } else if(args.indexOf(module.flag) !== -1) {
                grunt.log.writeln(("compiling " + module.flag + " module...").yellow);
                compiled += compileModule(module.flag);
            } 
        });

        grunt.file.write(build.dest, compiled);
        grunt.task.run("uglify");
    });

    grunt.registerTask("build", function () {
        var build = grunt.config.get("oak"),
            opts = [];

        build.src.forEach(function (o) {
            if (o.flag) {
                opts.push(o.flag);
            }
        });
        grunt.task.run("custom:" +  opts.join(","));
    });


};
